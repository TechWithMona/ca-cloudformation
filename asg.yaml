AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation for VPC with Auto Scaling and Elastic Load Balancing'

Resources:
  
  # My VPC - Virtual Private Cloud for networking setup
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '172.16.0.0/16'  # Define the IP range for the VPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Public Subnet in AZ 1 - Subnet for public-facing resources
  PublicSubnet2A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']  # First AZ in the region
      MapPublicIpOnLaunch: true  # Assign public IPs to instances
      Tags:
        - Key: Name
          Value: PublicSubnet2A

  # AppPrivate Subnet in AZ 1 - Subnet for app-related resources
  AppPrivateSubnet2A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.2.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: AppPrivateSubnet2A

  # DataPrivate Subnet in AZ 1 - Subnet for private data resources
  DataPrivateSubnet2A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.3.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: DataPrivateSubnet2A

  # InternetGateway - Allows communication with the internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  # Attach gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table for routing internet traffic
  PublicRoutetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRoutetable

  # Public route for internet access
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRoutetable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Security Group for web servers to allow HTTP traffic
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable HTTP access'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'  # Allow HTTP traffic from anywhere

  # Launch Template for Auto Scaling instances (Replacing LaunchConfiguration)
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 'MyWebServerTemplate'
      VersionDescription: 'v1'
      LaunchTemplateData:
        ImageId: ami-xxxxxxxxxxxxxxxxxxx  # AMI ID for web servers
        InstanceType: t2.micro  # Instance type for Auto Scaling group
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo 'Hello from AutoScaling' > /var/www/html/index.html

  # Auto Scaling Group to manage instances
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateName: !Ref MyLaunchTemplate
        Version: '1'
      MinSize: 1  # Minimum number of instances
      MaxSize: 3  # Maximum number of instances
      DesiredCapacity: 2  # Desired number of instances
      VPCZoneIdentifier:
        - !Ref PublicSubnet2A
        - !Ref PublicSubnet2B
      Tags:
        - Key: Name
          Value: AutoScalingWebServer
          PropagateAtLaunch: true

  # CloudWatch Alarm to trigger scaling action when CPU exceeds 70%
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Alarm when CPU exceeds 70%'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/EC2'
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '70'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyAutoScalingGroup
      AlarmActions:
        - !Ref ScaleOutPolicy

  # Scaling Policy for Auto Scaling group
  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: '1'  # Add one instance when the alarm triggers
      Cooldown: '300'  # Cooldown period after scaling action
      AdjustmentType: ChangeInCapacity